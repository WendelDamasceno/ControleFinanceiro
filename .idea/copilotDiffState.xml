<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# Sistema de Controle Financeiro&#10;&#10;##  Descrição&#10;Sistema de controle financeiro pessoal desenvolvido em Java como projeto da disciplina de **Programação Orientada a Objetos (POO)** do **IFBA**. Esta é a **primeira parte do projeto**, focando na estrutura backend e modelagem de dados.&#10;&#10;##  Objetivos da Disciplina&#10;- Aplicar conceitos de Programação Orientada a Objetos&#10;- Implementar padrões de projeto (DAO, MVC)&#10;- Trabalhar com persistência de dados usando JDBC&#10;- Desenvolver estrutura robusta para aplicação desktop&#10;&#10;## ️ Arquitetura do Projeto&#10;&#10;### Padrões Implementados&#10;- **MVC (Model-View-Controller)**: Separação clara de responsabilidades&#10;- **DAO (Data Access Object)**: Abstração da camada de acesso a dados&#10;- **Factory Pattern**: Para conexões com banco de dados&#10;&#10;### Estrutura de Pacotes&#10;```&#10;com.controlfinanceiro/&#10;├── model/          # Entidades e enums&#10;├── dao/            # Interfaces e implementações DAO&#10;├── controller/     # Controladores da aplicação&#10;├── view/           # Interface gráfica (a ser implementada)&#10;├── util/           # Classes utilitárias&#10;└── exception/      # Exceções customizadas&#10;```&#10;&#10;##  Modelo de Dados&#10;&#10;### Entidades Principais&#10;- **Categoria**: Classificação das transações&#10;- **Transacao**: Registro de receitas e despesas&#10;- **Orcamento**: Controle de limites de gastos por categoria&#10;&#10;### Banco de Dados&#10;- **SGBD**: MySQL 8.0+&#10;- **Encoding**: UTF-8 (utf8mb4)&#10;- **Script**: `script_banco.sql` com estrutura completa&#10;&#10;## ️ Tecnologias Utilizadas&#10;&#10;### Backend&#10;- **Java 21** - Linguagem principal&#10;- **Maven** - Gerenciamento de dependências&#10;- **MySQL Connector** - Conexão com banco de dados&#10;- **Apache Commons Lang** - Utilitários&#10;&#10;### Interface (Planejada)&#10;- **Java Swing** - Interface gráfica desktop&#10;- **FlatLaf** - Look and Feel moderno&#10;- **MigLayout** - Layout manager avançado&#10;- **JCalendar** - Componente de calendário&#10;&#10;### Testes&#10;- **JUnit 5** - Framework de testes&#10;- **Mockito** - Mocks para testes unitários&#10;- **H2 Database** - Banco em memória para testes&#10;&#10;### Logging e Serialização&#10;- **Logback** - Sistema de logs&#10;- **Jackson** - Processamento JSON (futuras integrações)&#10;&#10;##  Funcionalidades Implementadas (Backend)&#10;&#10;### ✅ Estrutura Completa&#10;- [x] Modelos de dados com validações&#10;- [x] DAOs com operações CRUD&#10;- [x] Controladores com regras de negócio&#10;- [x] Sistema de exceções customizadas&#10;- [x] Utilitários para formatação e conexão&#10;- [x] Configuração Maven completa&#10;- [x] Script de banco com dados de exemplo&#10;&#10;###  Em Desenvolvimento&#10;- [ ] Interface gráfica (View layer)&#10;- [ ] Classe principal funcional&#10;- [ ] Integração completa das camadas&#10;&#10;## ️ Estrutura do Banco de Dados&#10;&#10;### Tabelas&#10;1. **categoria** - Categorias das transações&#10;2. **transacao** - Registro de movimentações financeiras&#10;3. **orcamento** - Limites de gastos por categoria/mês&#10;&#10;### Views&#10;- `vw_resumo_mensal` - Resumo financeiro por mês/categoria&#10;- `vw_saldo_atual` - Saldo atual consolidado&#10;&#10;### Procedures&#10;- `sp_relatorio_orcamento_vs_real` - Comparativo orçado vs realizado&#10;&#10;##  Como Executar&#10;&#10;### Pré-requisitos&#10;- Java 21+&#10;- Maven 3.8+&#10;- MySQL 8.0+&#10;&#10;### Configuração&#10;1. **Clone o repositório**&#10;   ```bash&#10;   git clone https://github.com/WendelDamasceno/ControleFinanceiro.git&#10;   cd ControleFinanceiro&#10;   ```&#10;&#10;2. **Configure o banco de dados**&#10;   ```bash&#10;   mysql -u root -p &lt; script_banco.sql&#10;   ```&#10;&#10;3. **Configure as propriedades de conexão**&#10;   - Edite `src/main/resources/database.properties`&#10;&#10;4. **Compile o projeto**&#10;   ```bash&#10;   mvn clean compile&#10;   ```&#10;&#10;5. **Execute os testes**&#10;   ```bash&#10;   mvn test&#10;   ```&#10;&#10;##  Status do Projeto&#10;&#10;### Primeira Entrega (Atual)&#10;- ✅ Modelagem completa das entidades&#10;- ✅ Implementação da camada DAO&#10;- ✅ Controladores com regras de negócio&#10;- ✅ Sistema de exceções&#10;- ✅ Estrutura de banco de dados&#10;- ✅ Configuração Maven&#10;&#10;### Próximas Etapas&#10;-  Desenvolvimento da interface gráfica&#10;-  Integração View-Controller&#10;-  Implementação de relatórios&#10;-  Validações de formulário&#10;-  Sistema de backup/restore&#10;&#10;## ‍ Informações Acadêmicas&#10;- **Instituição**: IFBA (Instituto Federal da Bahia)&#10;- **Disciplina**: Programação Orientada a Objetos&#10;- **Desenvolvedor**: Wendel Damasceno&#10;- **Período**: 2025.1&#10;&#10;##  Observações&#10;Este projeto representa a aplicação prática dos conceitos de POO aprendidos em sala de aula, com foco especial em:&#10;- Encapsulamento e abstração&#10;- Herança e polimorfismo&#10;- Padrões de projeto&#10;- Arquitetura em camadas&#10;- Persistência de dados&#10;&#10;---&#10;**Nota**: Esta é a primeira versão do projeto, com foco na estrutura backend. A interface gráfica será implementada nas próximas etapas da disciplina." />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>